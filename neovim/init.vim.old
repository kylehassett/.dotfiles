source $HOME/.config/nvim/plugins.vim


" Neovim
" ++ General
colorscheme dracula 
set autoindent
set autoread
set background=dark
" set clipboard+=unnamed " Disabling for now, seems better to learn registers.
set formatoptions-=cro
set colorcolumn=80
set cursorline
set encoding=utf-8
set expandtab
set fileencoding=utf-8
set guifont=JetBrains\ Mono:13
set hidden
set ignorecase
set list
set nobackup
set nowritebackup
set nowrap
set number
set numberwidth
set relativenumber
set ruler
set scrolloff=10
set shiftwidth=4
set showmatch
set showtabline=2
set softtabstop=4
set smartindent
set smarttab
set tabstop=4
set termguicolors
set updatetime=300
set wildmenu
syntax enable
" --
" ++ Personalization
let mapleader = " "
" --
" ++ Window navigation
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

nnoremap <silent> <C-h> :call WinMove('h')<CR>
nnoremap <silent> <C-j> :call WinMove('j')<CR>
nnoremap <silent> <C-k> :call WinMove('k')<CR>
nnoremap <silent> <C-l> :call WinMove('l')<CR>
" --


" ++ AutoSave
lua << EOF
local autosave = require("autosave")

autosave.setup(
    {
        enabled = true,
        execution_message = "AutoSave: saved at " .. vim.fn.strftime("%H:%M:%S"),
        events = {"BufLeave", "BufWinLeave", "TabLeave", "WinLeave"},
        conditions = {
            exists = true,
            filename_is_not = {},
            filetype_is_not = {},
            modifiable = true
        },
        write_all_buffers = false,
        on_off_commands = true,
        clean_command_line_interval = 0,
        debounce_delay = 135
    }
)
EOF
" --


" CoC
" ++ Add :Format to format entire buffer
" command! -nargs=0 Format :call CocActionAsync('format')
" --
" ++ Highlight current symbol on hover
" autocmd CursorHold * silent call CocActionAsync('highlight')
" --
" ++ Make <CR> auto-select the first completion item and notify coc.nvim to format on enter, <cr> could be remapped by other vim plugin
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                             " \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" --
" ++ Tab completion
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" 
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction
" --

" FZF
" ++
let $FZF_DEFAULT_COMMAND = "rg --files --hidden -g '!.git/'"
" --

" indent-blankline
" ++
lua << EOF
vim.opt.listchars:append "eol:â†´"

vim.cmd [[highlight IndentBlanklineIndent1 guibg=#184e77 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent2 guibg=#1e6091 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent3 guibg=#1a759f gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent4 guibg=#168aad gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent5 guibg=#34a0a4 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent6 guibg=#52b69a gui=nocombine]]

require("indent_blankline").setup {
    char = "",
    char_highlight_list = {
        "IndentBlanklineIndent1",
        "IndentBlanklineIndent2",
        "IndentBlanklineIndent3",
        "IndentBlanklineIndent4",
        "IndentBlanklineIndent5",
        "IndentBlanklineIndent6",
    },
    space_char_highlight_list = {
        "IndentBlanklineIndent1",
        "IndentBlanklineIndent2",
        "IndentBlanklineIndent3",
        "IndentBlanklineIndent4",
        "IndentBlanklineIndent5",
        "IndentBlanklineIndent6",
    },
    show_end_of_line = true,
    show_trailing_blankline_indent = false,
}
EOF
" --


" LightLine
" ++ Replace filename component of Lightline statusline
let g:lightline = {
      \ 'component_function': {
      \   'filename': 'FilenameForLightline'
      \ }
      \ }

" Show full path of filename
function! FilenameForLightline()
    return expand('%')
endfunction
" --


" NERDTree
" ++ General
" let NERDTreeIgnore=['.DS_Store']
" let NERDTreeShowHidden=1
" --
" ++ Personalization
" --
" ++ Start NERDTree when Vim starts with a directory argument.
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
"      \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif
" --
" ++ Start NERDTree when Vim is started without file arguments.
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
" --
" ++ If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
" autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
"    \ let buf=bufnr() | buffer# | execute 'normal! \<C-W>w' | execute 'buffer'.buf | endif
" --
" ++ Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
" --


" vim-indent
" ++ General
let g:indent_guides_enable_on_vim_startup = 1
" --


" +++ Keyboard shortcut system
" <leader><v>erb<noun> EX: new tab -> <leader>nt
" Thinking in VIM, but for extensions, tabs, windows, etc.
" Use capital letters for verb if there are multiple semantically useful words
" for the short cuts.
"
" a - action
nmap <leader>ac <Plug>(coc-codeaction)
xmap <leader>as <Plug>(coc-codeaction-selected)
nmap <leader>as <Plug>(coc-codeaction-selected)
" c - code
nmap <leader>cd <Plug>(coc-definition)
nmap <leader>ci <Plug>(coc-implementation)
nmap <leader>cn <Plug>(coc-rename)
nmap <leader>cr <Plug>(coc-references)
nmap <leader>ct <Plug>(coc-type-definition)
" f - find
nnoremap <leader>fc :Ag<CR>
nnoremap <leader>ff :FZF<CR>
nnoremap <leader>fg :GFiles<CR>
" f - format
nnoremap <leader>F :Format<CR>
xmap <leader>fs  <Plug>(coc-format-selected)
nmap <leader>fs <Plug>(coc-format-selected)
" h
"" h - left movement
nnoremap <leader>ht :tabprevious<CR>
"" hide
nmap <leader>hh :noh<CR>
" l
nnoremap <leader>lt :tabnext<CR>
" o - open
nnoremap <leader>on :NERDTree<CR>
" o - only
nnoremap <leader>ot :tabonly<CR>
nnoremap <leader>ow <C-w>o
" n - new
nnoremap <leader>nt :$tabnew %<CR>
" r - reload
nnoremap <leader>rt :edit<CR>
" q - quit
nnoremap <leader>qn :NERDTreeClose<CR>
nnoremap <leader>qt :tabclose<CR>
nnoremap <leader>qw <C-w>q " quit tab
" ---

